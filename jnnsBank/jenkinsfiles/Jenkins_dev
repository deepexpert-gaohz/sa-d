#!/usr/bin/env groovy
pipeline {

    agent { label "master" }


//    tools {
//        jdk 'JDK1.7'
//        maven 'M3'
//    }

    parameters {

        choice(name: 'server_type', choices: 'release\n' +
            'mini-release\n' +
            'sonar\n'+
            'no-mail-release', description: '请选择部署类型')
    }

    stages {
        stage('check out code') {

            steps {

                        checkout([$class                           : 'GitSCM',
                                  branches                         : [[name: '${chooseBranch}']],
                                  doGenerateSubmoduleConfigurations: false, extensions: [],
                                  submoduleCfg                     : [],
                                  userRemoteConfigs                : [[credentialsId: '3b81fdf7-5152-4a90-9815-3f3d5e6baa0d', url: 'http://47.97.172.215:8980/idea-ams/ams.git']]
                        ])

//               checkout scm


            }
        }

        stage('Build and push') {
            steps {
                echo '您选择的分支是' + env.chooseBranch
                echo '您选择的build类型是' + env.server_type
                script {
                    if (env.server_type == 'sonar') {
                        withEnv(["JAVA_HOME=/opt/jdk1.8.0_161"]) {
//                            withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {

                            sh '''
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven maven:3.6-jdk-7 \\
                                mvn clean package -pl ams-web -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C

                                '''
                            def scannerHome = tool 'scanner';
                            withSonarQubeEnv('sonar') {
                                sh "${scannerHome}/bin/sonar-scanner"
                            }
//                            }
                        }
                    } else {
                        if (env.server_type == 'release') {
//                            withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
                            sh '''
                                prior_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_version}
                                current_version=$((${prior_version}+1))
                                sed -i "s|number:|number: 4.${current_version}.0|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application.yml
                                sed -i "s|bc01d91c6c39d40b6b091c2a7560df33|temp|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application-kyc.yml
                                
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:set -DoldVersion=* -DnewVersion=4.${current_version}.0 -DprocessAllModules=true -DallowSnapshots=true 
                                
                                                                
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn clean deploy -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C        


                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:revert
                                '''

                            sshagent(['48ce30d0-7508-4d3e-a892-a0e38975425d']) {
                                sh '''
                                prior_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_version}
                                current_version=$((${prior_version}+1))
                            d1="`date +%Y%m%d`"
                            echo ${d1}
                            cd ${JENKINS_HOME}/workspace/${JOB_NAME}
                            git config --global user.email "77086142@qq.com"
                            git config --global user.name "Charles Kong"
                            git tag -a 4.${current_version}.0 -m "描述信息：对当前发布代码打标记"
                            git push ssh://git@47.97.172.215:8922/idea-ams/ams.git 4.${current_version}.0
                            echo "${current_version}" > /opt/files/version/big_version.txt
                            echo "0" > /opt/files/version/mini_version.txt
                 '''
//                                }

                            }
                        } else {
                            if (env.server_type == 'mini-release') {
//                                withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
                                sh '''
                                prior_big_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_big_version}
                                current_big_version=$((${prior_big_version}))
                                prior_mini_version=$(cat /opt/files/version/mini_version.txt)
                                echo ${prior_mini_version}
                                current_mini_version=$((${prior_mini_version}+1))
                                sed -i "s|number:|number: 4.${current_big_version}.${current_mini_version}|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application.yml
                                sed -i "s|bc01d91c6c39d40b6b091c2a7560df33|temp|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application-kyc.yml
                                
                               docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:set -DoldVersion=* -DnewVersion=4.${current_big_version}.${current_mini_version} -DprocessAllModules=true -DallowSnapshots=true  
                                
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn clean deploy -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C        
                                
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:revert        
                                '''
                                sshagent(['48ce30d0-7508-4d3e-a892-a0e38975425d']) {
                                    sh '''
                                prior_big_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_big_version}
                                current_big_version=$((${prior_big_version}))
                                prior_mini_version=$(cat /opt/files/version/mini_version.txt)
                                echo ${prior_mini_version}
                                current_mini_version=$((${prior_mini_version}+1))
                            d1="`date +%Y%m%d`"
                            echo ${d1}
                            cd ${JENKINS_HOME}/workspace/${JOB_NAME}
                            git config --global user.email "77086142@qq.com"
                            git config --global user.name "Charles Kong"
                            git tag -a 4.${current_big_version}.${current_mini_version} -m "描述信息：对当前发布代码打标记"
                            git push ssh://git@47.97.172.215:8922/idea-ams/ams.git 4.${current_big_version}.${current_mini_version}
                            echo "${current_mini_version}" > /opt/files/version/mini_version.txt
                 '''
                                }

//                                }
                            }
                        }
                        if (env.server_type == 'no-mail-release'){
                            sh '''
                                prior_big_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_big_version}
                                current_big_version=$((${prior_big_version}))
                                prior_mini_version=$(cat /opt/files/version/mini_version.txt)
                                echo ${prior_mini_version}
                                current_mini_version=$((${prior_mini_version}+1))
                                sed -i "s|number:|number: 4.${current_big_version}.${current_mini_version}|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application.yml
                                sed -i "s|bc01d91c6c39d40b6b091c2a7560df33|temp|" ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources/application-kyc.yml
                               
                               
                               docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:set -DoldVersion=* -DnewVersion=4.${current_big_version}.${current_mini_version} -DprocessAllModules=true -DallowSnapshots=true  
                                 
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn clean deploy -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C        
                                
                                
                                
                                docker run -i --rm --name my-maven-project \\
                                -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                                -v /maven-repo:/root/.m2 \\
                                -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                                mvn versions:revert        
                                '''
                            sshagent(['48ce30d0-7508-4d3e-a892-a0e38975425d']) {
                                sh '''
                                prior_big_version=$(cat /opt/files/version/big_version.txt)
                                echo ${prior_big_version}
                                current_big_version=$((${prior_big_version}))
                                prior_mini_version=$(cat /opt/files/version/mini_version.txt)
                                echo ${prior_mini_version}
                                current_mini_version=$((${prior_mini_version}+1))
                            d1="`date +%Y%m%d`"
                            echo ${d1}
                            cd ${JENKINS_HOME}/workspace/${JOB_NAME}
                            git config --global user.email "77086142@qq.com"
                            git config --global user.name "Charles Kong"
                            git tag -a 4.${current_big_version}.${current_mini_version} -m "描述信息：对当前发布代码打标记"
                            git push ssh://git@47.97.172.215:8922/idea-ams/ams.git 4.${current_big_version}.${current_mini_version}
                            echo "${current_mini_version}" > /opt/files/version/mini_version.txt
                 '''
                            }

                        }
                    }
                }
            }

        }
        stage('合并代码') {
            agent { label "master" }
            steps {
                checkout([$class                           : 'GitSCM', branches: [[name: '*/develop-backup']],
                          doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                          userRemoteConfigs                : [[credentialsId: '48ce30d0-7508-4d3e-a892-a0e38975425d',
                                                               url          : 'ssh://git@47.97.172.215:8922/idea-ams/ams.git']]])
                sshagent(['48ce30d0-7508-4d3e-a892-a0e38975425d']) {

                    sh '''
               
                            current_big_version=$(cat /opt/files/version/big_version.txt)
                            current_mini_version=$(cat /opt/files/version/mini_version.txt)
                            
                            git merge origin/develop
                            git push origin HEAD:develop-backup
                            git remote remove origin 
                            rm -rf .git
                            rm -rf pbc-api
                            rm -rf pbc-service
                            rm -rf api-common
                            rm -rf common
                            rm -rf db-entity
                            rm -rf poi
                            git init
                            git remote add origin ssh://git@47.97.172.215:8922/idea-ams/ams-source.git
                            git add .
                            git config --global user.email "77086142@qq.com"
                            git config --global user.name "Charles Kong"
                            git commit -m "ci commit automatically with version:4.${current_big_version}.${current_mini_version}" || true
                            git push -f origin HEAD:ams-source
               '''
                }


            }
        }

        stage('run demo') {
            agent { label "demo" }
            steps {
                script {
                    if (env.server_type == 'no-mail-release'){
                        echo "bye bye"

                    }
                    else{
                        checkout([$class                           : 'GitSCM',
                                  branches                         : [[name: '${chooseBranch}']],
                                  doGenerateSubmoduleConfigurations: false, extensions: [],
                                  submoduleCfg                     : [],
                                  userRemoteConfigs                : [[credentialsId: '3b81fdf7-5152-4a90-9815-3f3d5e6baa0d', url: 'http://47.97.172.215:8980/idea-ams/ams.git']]
                        ])

                        sh '''
                  echo ${JENKINS_HOME}
                  cp -r /opt/files/conf/${JOB_NAME}/application-cust.properties ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources
                  
                  
                  docker run -i --rm --name my-maven-project \\
                  -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
                  -v /maven-repo:/root/.m2 \\
                  -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
                  mvn clean package -pl ams-web -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C
                  
                  rm -rf /opt/files/webapps/${JOB_NAME}
                  mkdir /opt/files/webapps/${JOB_NAME}
                  cd ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/target
                  cp -r ams.war /opt/files/webapps/${JOB_NAME}
                  docker rm -f ${JOB_NAME}tomcat || true
                  docker run -d --privileged=true -v /opt/files/webapps/${JOB_NAME}:/usr/local/apache-tomcat-7.0.90/webapps -v /home/${JOB_NAME}/dgbb:/home/${JOB_NAME}/dgbb -v /home/${JOB_NAME}/dgbb2:/home/${JOB_NAME}/dgbb2 -p 9090:8080 --name ${JOB_NAME}tomcat jdk7/tomcat7
                  '''

                    }
                }


//                checkout([$class                           : 'GitSCM',
//                          branches                         : [[name: '${chooseBranch}']],
//                          doGenerateSubmoduleConfigurations: false, extensions: [],
//                          submoduleCfg                     : [],
//                          userRemoteConfigs                : [[credentialsId: '3b81fdf7-5152-4a90-9815-3f3d5e6baa0d', url: 'http://47.97.172.215:8980/idea-ams/ams.git']]
//                ])
//
//                sh '''
//                  echo ${JENKINS_HOME}
//                  cp -r /opt/files/conf/${JOB_NAME}/application-cust.properties ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/src/main/resources
//
//
//                  docker run -i --rm --name my-maven-project \\
//                  -v ${JENKINS_HOME}/workspace/${JOB_NAME}:/usr/src/mymaven \\
//                  -v /maven-repo:/root/.m2 \\
//                  -w /usr/src/mymaven kongqi/maven3.6-jdk7 \\
//                  mvn clean package -pl ams-web -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C
//
//                  rm -rf /opt/files/webapps/${JOB_NAME}
//                  mkdir /opt/files/webapps/${JOB_NAME}
//                  cd ${JENKINS_HOME}/workspace/${JOB_NAME}/ams-web/target
//                  cp -r ams.war /opt/files/webapps/${JOB_NAME}
//                  docker rm -f ${JOB_NAME}tomcat || true
//                  docker run -d --privileged=true -v /opt/files/webapps/${JOB_NAME}:/usr/local/apache-tomcat-7.0.90/webapps -v /home/${JOB_NAME}/dgbb:/home/${JOB_NAME}/dgbb -v /home/${JOB_NAME}/dgbb2:/home/${JOB_NAME}/dgbb2 -p 9090:8080 --name ${JOB_NAME}tomcat jdk7/tomcat7
//                  '''
            }
        }
        stage('change_jira_status') {
            steps {
                script {
                    if (env.server_type == 'no-mail-release'){
                        def min_version = new File("/opt/files/version/mini_version.txt").getText().split("\n")
                        def big_version = new File("/opt/files/version/big_version.txt").getText().split("\n")
                        String version = "4." + big_version[0] + "." + min_version[0]
                        echo version

                    }
                    else{

                        withEnv(['JIRA_SITE=LOCAL']) {
                            def transitionInput_area_defect =
                                [
                                    transition: [
                                        id: '801'
                                    ]
                                ]

                            def transitionInput_close_defect =
                                [
                                    transition: [
                                        id: '871'
                                    ]
                                ]
                            def transitionInput_new_function =
                                [
                                    transition: [
                                        id: '91'
                                    ]
                                ]




                            def min_version = new File("/opt/files/version/mini_version.txt").getText().split("\n")
                            def big_version = new File("/opt/files/version/big_version.txt").getText().split("\n")
                            String version = "4." + big_version[0] + "." + min_version[0]
                            def now = new Date().format("yyyy-MM-dd")

                            Map versionlist = new HashMap()
                            def projects = jiraGetProjects() //获取project
                            for (i=0;i<projects.data.key.size();i++){
//                            if (projects.data.key[i]=="AMS"||projects.data.key[i]=="IDP"||projects.data.key[i]=="KXH"){
                                if (projects.data.key[i]=="AMS"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="IDP"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="KXH"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="YZH"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="JIRA"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="JIRATEST"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="OA"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="RYX"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="RH"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="JZ"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="JG"){
                                    echo "do not"
                                }
                                else if(projects.data.key[i]=="XC"){
                                    echo "do not"
                                }
                                else
                                {
                                    def key = projects.data.key[i]
                                    echo key
                                    def newVersion = jiraNewVersion version: [name: version, project: projects.data.key[i], released: true, releaseDate: now]
                                    versionlist.put(key, newVersion.data)
                                }
                            }

                            List issueList=new ArrayList()
                            def result_area = jiraJqlSearch jql: 'issuetype in (新需求, 产品缺陷) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) AND status in (内部通过, 转给现场)'
                            def area_issues = result_area.data.issues
                            for (i = 0; i < area_issues.size(); i++) {
                                //获取key前缀
                                def key= area_issues[i].key
                                def project=key.split("-")
                                def issue=area_issues[i].key.toString()+": "+area_issues[i].fields.summary.toString()
//                            issueList.add(issue)
                                def result = jiraGetIssue idOrKey: area_issues[i].key
                                def fixVersions = result.data.fields.fixVersions << versionlist.get(project[0]) //从map里取key的版本
                                def testIssue = [fields: [fixVersions: fixVersions]]
                                def brach = area_issues[i].fields.customfield_10700
                                if (brach == null) {
                                    issueList.add(issue)
                                    jiraEditIssue idOrKey: area_issues[i].key, issue: testIssue   //给ticket的修复版本加上版本号
                                    jiraTransitionIssue idOrKey: area_issues[i].key, input: transitionInput_area_defect
                                    jiraAddComment idOrKey: area_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
                                } else {
                                    brach.each {
                                        if (it == "develop") {
                                            issueList.add(issue)
                                            jiraEditIssue idOrKey: area_issues[i].key, issue: testIssue
                                            //给ticket的修复版本加上版本号
                                            jiraTransitionIssue idOrKey: area_issues[i].key, input: transitionInput_area_defect
                                            jiraAddComment idOrKey: area_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
                                        }
                                    }

                                }


                            }

                            def result_nomarl = jiraJqlSearch jql: 'issuetype in (故事,故障) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 内部通过'

                            def nomarl_issues = result_nomarl.data.issues
                            for (i = 0; i < nomarl_issues.size(); i++) {
                                //获取key前缀
                                def key= nomarl_issues[i].key
                                def project=key.split("-")
                                def issue=nomarl_issues[i].key.toString()+": "+nomarl_issues[i].fields.summary.toString()
//                            issueList.add(issue)
                                def result = jiraGetIssue idOrKey: nomarl_issues[i].key
                                def fixVersion = result.data.fields.fixVersions << versionlist.get(project[0])
                                def testIssue = [fields: [fixVersions: fixVersion]]
                                def brach = nomarl_issues[i].fields.customfield_10700
                                if (brach == null) {
                                    issueList.add(issue)
                                    jiraEditIssue idOrKey: nomarl_issues[i].key, issue: testIssue
                                    jiraTransitionIssue idOrKey: nomarl_issues[i].key, input: transitionInput_close_defect
                                    jiraAddComment idOrKey: nomarl_issues[i].key, comment: "该ticket关闭于版本【" + version + "】"

                                } else {
                                    brach.each {
                                        if (it == "develop") {
                                            issueList.add(issue)
                                            jiraEditIssue idOrKey: nomarl_issues[i].key, issue: testIssue
                                            jiraTransitionIssue idOrKey: nomarl_issues[i].key, input: transitionInput_close_defect
                                            jiraAddComment idOrKey: nomarl_issues[i].key, comment: "该ticket关闭于版本【" + version + "】"
                                        }
                                    }
                                }
                            }

                            def result = jiraJqlSearch jql: 'issuetype in (故事) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 转给现场'

                            def confirm_issues = result.data.issues
                            for (i = 0; i < confirm_issues.size(); i++) {
                                //获取key前缀
                                def key= confirm_issues[i].key
                                def project=key.split("-")
                                def issue=confirm_issues[i].key.toString()+": "+confirm_issues[i].fields.summary.toString()
//                            issueList.add(issue)
                                def result1 = jiraGetIssue idOrKey: confirm_issues[i].key
                                def fixVersion = result1.data.fields.fixVersions << versionlist.get(project[0])
                                def testIssue = [fields: [fixVersions: fixVersion]]
                                def brach = confirm_issues[i].fields.customfield_10700
                                if (brach == null) {
                                    issueList.add(issue)
                                    jiraEditIssue idOrKey: confirm_issues[i].key, issue: testIssue
                                    jiraTransitionIssue idOrKey: confirm_issues[i].key, input: transitionInput_area_defect
                                    jiraAddComment idOrKey: confirm_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"

                                } else {
                                    brach.each {
                                        if (it == "develop") {
                                            issueList.add(issue)
                                            jiraEditIssue idOrKey: confirm_issues[i].key, issue: testIssue
                                            jiraTransitionIssue idOrKey: confirm_issues[i].key, input: transitionInput_area_defect
                                            jiraAddComment idOrKey: confirm_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
                                        }
                                    }
                                }
                            }


                            def function_result = jiraJqlSearch jql: 'issuetype ="新需求/改进" AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 内部通过'

                            def confirm_function = function_result.data.issues
                            for (i = 0; i < confirm_function.size(); i++) {
                                //获取key前缀
                                def key= confirm_function[i].key
                                def project=key.split("-")
                                def issue=confirm_function[i].key.toString()+": "+confirm_function[i].fields.summary.toString()
//                            issueList.add(issue)
                                def result1 = jiraGetIssue idOrKey: confirm_function[i].key
                                def fixVersion = result1.data.fields.fixVersions << versionlist.get(project[0])
                                def testIssue = [fields: [fixVersions: fixVersion]]
                                def brach = confirm_function[i].fields.customfield_10700
                                if (brach == null) {
                                    issueList.add(issue)
                                    jiraEditIssue idOrKey: confirm_function[i].key, issue: testIssue
                                    jiraTransitionIssue idOrKey: confirm_function[i].key, input: transitionInput_new_function
                                    jiraAddComment idOrKey: confirm_function[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"

                                } else {
                                    brach.each {
                                        if (it == "develop") {
                                            issueList.add(issue)
                                            jiraEditIssue idOrKey: confirm_function[i].key, issue: testIssue
                                            jiraTransitionIssue idOrKey: confirm_function[i].key, input: transitionInput_new_function
                                            jiraAddComment idOrKey: confirm_function[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
                                        }
                                    }
                                }
                            }




                            if(issueList.isEmpty()){
                                echo "no issue"
                                def testIssue = [fields: [ // id or key must present for project.
                                                           project: [id: '11204'],  //账管重构项目ID
                                                           summary: '版本记录【'+version+'】',
                                                           description: '没有单据关联到当前版本',
                                                           // id or name must present for issueType.
                                                           issuetype: [id: '10106']]]
                                response = jiraNewIssue issue: testIssue
                                echo response.successful.toString()
                                echo response.data.toString()

                            }
                            else{
                                echo "not empty"
                                String issueDesc=""

                                for (i=0;i<issueList.size();i++){
                                    issueDesc=issueDesc+issueList[i]+'\n'

                                }
                                echo issueDesc

                                def testIssue = [fields: [ // id or key must present for project.
                                                           project: [id: '11204'],  //账管重构项目ID
                                                           summary: '版本记录【'+version+'】',
                                                           description: issueDesc,
                                                           // id or name must present for issueType.
                                                           issuetype: [id: '11007']]]
                                response = jiraNewIssue issue: testIssue

                                echo response.successful.toString()
                                echo response.data.toString()


                            }
                            //send email

                            echo version
                            emailext body: '最新版本发布啦~，版本包含单据信息在：http://47.97.172.215:8081/browse/'+ response.data.key.toString()+'，请大家自行查看并及时跟进状态，下载版本请参考http://47.97.172.215:8090/pages/viewpage.action?pageId=3342488二次开发手册;二次开发方法请参考http://open.ezhanghu.cn/web/#/page/34 ，源码参考地址http://47.97.172.215:8980/idea-ams/ams-source/tree/ams-source；weblogic12C兼容性解决方案：http://47.97.172.215:8090/pages/viewpage.action?pageId=11405245', subject: '【最新版本发布】'+version, to: 'dearall@ideatech.info'


                        }

                    }

//
//                    withEnv(['JIRA_SITE=LOCAL']) {
//                        def transitionInput_area_defect =
//                            [
//                                transition: [
//                                    id: '801'
//                                ]
//                            ]
//
//                        def transitionInput_close_defect =
//                            [
//                                transition: [
//                                    id: '751'
//                                ]
//                            ]
//                        def transitionInput_new_function =
//                            [
//                                transition: [
//                                    id: '91'
//                                ]
//                            ]
//
//
//
//
//                        def min_version = new File("/opt/files/version/mini_version.txt").getText().split("\n")
//                        def big_version = new File("/opt/files/version/big_version.txt").getText().split("\n")
//                        String version = "4." + big_version[0] + "." + min_version[0]
//                        def now = new Date().format("yyyy-MM-dd")
//
//                        Map versionlist = new HashMap()
//                        def projects = jiraGetProjects() //获取project
//                        for (i=0;i<projects.data.key.size();i++){
////                            if (projects.data.key[i]=="AMS"||projects.data.key[i]=="IDP"||projects.data.key[i]=="KXH"){
//                            if (projects.data.key[i]=="AMS"){
//                                echo "do not"
//                            }
//                            else if(projects.data.key[i]=="IDP"){
//                                echo "do not"
//                            }
//                            else if(projects.data.key[i]=="KXH"){
//                                echo "do not"
//                            }
//                            else
//                            {
//                                def key = projects.data.key[i]
//                                echo key
//                                def newVersion = jiraNewVersion version: [name: version, project: projects.data.key[i], released: true, releaseDate: now]
//                                versionlist.put(key, newVersion.data)
//                            }
//                        }
//
//                        List issueList=new ArrayList()
//                        def result_area = jiraJqlSearch jql: 'issuetype in (新需求, 产品缺陷) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) AND status in (内部通过, 转给现场) and sprint != 108'
//                        def area_issues = result_area.data.issues
//                        for (i = 0; i < area_issues.size(); i++) {
//                            //获取key前缀
//                            def key= area_issues[i].key
//                            def project=key.split("-")
//                            def issue=area_issues[i].key.toString()+": "+area_issues[i].fields.summary.toString()
////                            issueList.add(issue)
//                            def result = jiraGetIssue idOrKey: area_issues[i].key
//                            def fixVersions = result.data.fields.fixVersions << versionlist.get(project[0]) //从map里取key的版本
//                            def testIssue = [fields: [fixVersions: fixVersions]]
//                            def brach = area_issues[i].fields.customfield_10700
//                            if (brach == null) {
//                                issueList.add(issue)
//                                jiraEditIssue idOrKey: area_issues[i].key, issue: testIssue   //给ticket的修复版本加上版本号
//                                jiraTransitionIssue idOrKey: area_issues[i].key, input: transitionInput_area_defect
//                                jiraAddComment idOrKey: area_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//                            } else {
//                                brach.each {
//                                    if (it == "develop") {
//                                        issueList.add(issue)
//                                        jiraEditIssue idOrKey: area_issues[i].key, issue: testIssue
//                                        //给ticket的修复版本加上版本号
//                                        jiraTransitionIssue idOrKey: area_issues[i].key, input: transitionInput_area_defect
//                                        jiraAddComment idOrKey: area_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//                                    }
//                                }
//
//                            }
//
//
//                        }
//
//                        def result_nomarl = jiraJqlSearch jql: 'issuetype in (故事,故障) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 内部通过 and sprint != 108'
//
//                        def nomarl_issues = result_nomarl.data.issues
//                        for (i = 0; i < nomarl_issues.size(); i++) {
//                            //获取key前缀
//                            def key= nomarl_issues[i].key
//                            def project=key.split("-")
//                            def issue=nomarl_issues[i].key.toString()+": "+nomarl_issues[i].fields.summary.toString()
////                            issueList.add(issue)
//                            def result = jiraGetIssue idOrKey: nomarl_issues[i].key
//                            def fixVersion = result.data.fields.fixVersions << versionlist.get(project[0])
//                            def testIssue = [fields: [fixVersions: fixVersion]]
//                            def brach = nomarl_issues[i].fields.customfield_10700
//                            if (brach == null) {
//                                issueList.add(issue)
//                                jiraEditIssue idOrKey: nomarl_issues[i].key, issue: testIssue
//                                jiraTransitionIssue idOrKey: nomarl_issues[i].key, input: transitionInput_close_defect
//                                jiraAddComment idOrKey: nomarl_issues[i].key, comment: "该ticket关闭于版本【" + version + "】"
//
//                            } else {
//                                brach.each {
//                                    if (it == "develop") {
//                                        issueList.add(issue)
//                                        jiraEditIssue idOrKey: nomarl_issues[i].key, issue: testIssue
//                                        jiraTransitionIssue idOrKey: nomarl_issues[i].key, input: transitionInput_close_defect
//                                        jiraAddComment idOrKey: nomarl_issues[i].key, comment: "该ticket关闭于版本【" + version + "】"
//                                    }
//                                }
//                            }
//                        }
//
//                        def result = jiraJqlSearch jql: 'issuetype in (故事) AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 转给现场  and sprint != 108'
//
//                        def confirm_issues = result.data.issues
//                        for (i = 0; i < confirm_issues.size(); i++) {
//                            //获取key前缀
//                            def key= confirm_issues[i].key
//                            def project=key.split("-")
//                            def issue=confirm_issues[i].key.toString()+": "+confirm_issues[i].fields.summary.toString()
////                            issueList.add(issue)
//                            def result1 = jiraGetIssue idOrKey: confirm_issues[i].key
//                            def fixVersion = result1.data.fields.fixVersions << versionlist.get(project[0])
//                            def testIssue = [fields: [fixVersions: fixVersion]]
//                            def brach = confirm_issues[i].fields.customfield_10700
//                            if (brach == null) {
//                                issueList.add(issue)
//                                jiraEditIssue idOrKey: confirm_issues[i].key, issue: testIssue
//                                jiraTransitionIssue idOrKey: confirm_issues[i].key, input: transitionInput_area_defect
//                                jiraAddComment idOrKey: confirm_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//
//                            } else {
//                                brach.each {
//                                    if (it == "develop") {
//                                        issueList.add(issue)
//                                        jiraEditIssue idOrKey: confirm_issues[i].key, issue: testIssue
//                                        jiraTransitionIssue idOrKey: confirm_issues[i].key, input: transitionInput_area_defect
//                                        jiraAddComment idOrKey: confirm_issues[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//                                    }
//                                }
//                            }
//                        }
//
//
//                        def function_result = jiraJqlSearch jql: 'issuetype ="新需求/改进" AND project not in (合同管理, AMS, IDP, 易账户, 台州人行影像) and status = 内部通过  and sprint != 108'
//
//                        def confirm_function = function_result.data.issues
//                        for (i = 0; i < confirm_function.size(); i++) {
//                            //获取key前缀
//                            def key= confirm_function[i].key
//                            def project=key.split("-")
//                            def issue=confirm_function[i].key.toString()+": "+confirm_function[i].fields.summary.toString()
////                            issueList.add(issue)
//                            def result1 = jiraGetIssue idOrKey: confirm_function[i].key
//                            def fixVersion = result1.data.fields.fixVersions << versionlist.get(project[0])
//                            def testIssue = [fields: [fixVersions: fixVersion]]
//                            def brach = confirm_function[i].fields.customfield_10700
//                            if (brach == null) {
//                                issueList.add(issue)
//                                jiraEditIssue idOrKey: confirm_function[i].key, issue: testIssue
//                                jiraTransitionIssue idOrKey: confirm_function[i].key, input: transitionInput_new_function
//                                jiraAddComment idOrKey: confirm_function[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//
//                            } else {
//                                brach.each {
//                                    if (it == "develop") {
//                                        issueList.add(issue)
//                                        jiraEditIssue idOrKey: confirm_function[i].key, issue: testIssue
//                                        jiraTransitionIssue idOrKey: confirm_function[i].key, input: transitionInput_new_function
//                                        jiraAddComment idOrKey: confirm_function[i].key, comment: "请更新部署AMS到版本【" + version + "】后进行确认"
//                                    }
//                                }
//                            }
//                        }
//
//
//
//
//                        if(issueList.isEmpty()){
//                            echo "no issue"
//                            def testIssue = [fields: [ // id or key must present for project.
//                                                       project: [id: '11204'],  //账管重构项目ID
//                                                       summary: '版本记录【'+version+'】',
//                                                       description: '没有单据关联到当前版本',
//                                                       // id or name must present for issueType.
//                                                       issuetype: [id: '10106']]]
//                            response = jiraNewIssue issue: testIssue
//                            echo response.successful.toString()
//                            echo response.data.toString()
//
//                        }
//                        else{
//                            echo "not empty"
//                            String issueDesc=""
//
//                            for (i=0;i<issueList.size();i++){
//                                issueDesc=issueDesc+issueList[i]+'\n'
//
//                            }
//                            echo issueDesc
//
//                            def testIssue = [fields: [ // id or key must present for project.
//                                                       project: [id: '11204'],  //账管重构项目ID
//                                                       summary: '版本记录【'+version+'】',
//                                                       description: issueDesc,
//                                                       // id or name must present for issueType.
//                                                       issuetype: [id: '11007']]]
//                            response = jiraNewIssue issue: testIssue
//
//                            echo response.successful.toString()
//                            echo response.data.toString()
//
//
//                        }
//                        //send email
//
//                            echo version
//                            emailext body: '最新版本发布啦~，版本包含单据信息在：http://47.97.172.215:8081/browse/'+ response.data.key.toString()+'，请大家自行查看并及时跟进状态，下载版本请参考http://47.97.172.215:8090/pages/viewpage.action?pageId=3342488二次开发手册;二次开发方法请参考http://open.ezhanghu.cn/web/#/page/34 ，如需源代码参考，请联系管理员开放代码权限；weblogic12C兼容性解决方案：http://47.97.172.215:8090/pages/viewpage.action?pageId=11405245', subject: '【最新版本发布】'+version, to: 'dearall@ideatech.info'
//
//
//                    }
                }
            }
        }

    }

    post {
//        agent { label "company" }

//        always {
//            sh "mvn clean deploy -am -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C  "
//            findbugs canComputeNew: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', isRankActivated: true, pattern: '**/**/findbugsXml.xml', unHealthy: ''
//            sh '''
//                   big_version=$(cat /opt/files/version/big_version.txt)
//                   mini_version=$(cat /opt/files/version/mini_version.txt)
//                   echo 4.$big_version.$mini_version
//
//                '''
//        }

        failure {
            emailext attachLog: true, body: '''<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>${ENV, var="JOB_NAME"}-第${BUILD_NUMBER}次构建日志</title>
</head>

<body leftmargin="8" marginwidth="0" topmargin="8" marginheight="4" offset="0">
    <table width="95%" cellpadding="0" cellspacing="0" style="font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif">
        <tr>
            <td>(本邮件由程序自动下发，请勿回复！)</td>
        </tr>
        <tr>
            <td>
                <h2><font color="#FF0000">构建结果 - ${BUILD_STATUS}</font></h2>
            </td>
        </tr>
        <tr>
            <td><br />
                <b><font color="#0B610B">构建信息</font></b>
                <hr size="2" width="100%" align="center" />
            </td>
        </tr>
        <tr>  
            <td>
                <ul>
                    <li>项目名称：${PROJECT_NAME}</li>
                    <li>构建编号：${BUILD_NUMBER}</li>                    
                    <li>触发原因：${CAUSE}</li>   
                    <li>构建日志：<a href="${BUILD_URL}console">${BUILD_URL}console</a></li>
                </ul>
            </td>
        </tr>
        <tr>
            <td>
                <b><font color="#0B610B">变更信息:</font></b>
               <hr size="2" width="100%" align="center" />
            </td>
        </tr>
        <tr>
            <td>
                <ul>
                    <li>上次构建成功后变化 :  ${CHANGES_SINCE_LAST_SUCCESS}</a></li>
                </ul>    
            </td>
        </tr>
 <tr>
            <td>
                <ul>
                    <li>上次构建不稳定后变化 :  ${CHANGES_SINCE_LAST_UNSTABLE}</a></li>
                </ul>    
            </td>
        </tr>
        <tr>
            <td>
                <ul>
                    <li>历史变更记录 : <a href="${PROJECT_URL}changes">${PROJECT_URL}changes</a></li>
                </ul>    
            </td>
        </tr>
        <tr>
            <td>
                <ul>
                    <li>变更集:${JELLY_SCRIPT,template="html"}</a></li>
                </ul>    
            </td>
        </tr>
        <!--
        <tr>
            <td>
                <b><font color="#0B610B">Failed Test Results</font></b>
                <hr size="2" width="100%" align="center" />
            </td>
        </tr>
        <tr>
            <td>
                <pre style="font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif">$FAILED_TESTS</pre>
                <br />
            </td>
        </tr>
        
        <tr>
            <td>
                <b><font color="#0B610B">构建日志 (最后 100行):</font></b>
                <hr size="2" width="100%" align="center" />
            </td>
        </tr>-->
        <!-- <tr>
            <td>Test Logs (if test has ran): <a
                href="${PROJECT_URL}ws/TestResult/archive_logs/Log-Build-${BUILD_NUMBER}.zip">${PROJECT_URL}/ws/TestResult/archive_logs/Log-Build-${BUILD_NUMBER}.zip</a>
                <br />
            <br />
            </td>
        </tr> -->
        <!--
        <tr>
            <td>
                <textarea cols="80" rows="30" readonly="readonly" style="font-family: Courier New">${BUILD_LOG, maxLines=100,escapeHtml=true}</textarea>
            </td>
        </tr>-->
        <hr size="2" width="100%" align="center" />
 
    </table>

</body>
</html>''', recipientProviders: [developers()], subject: '[Jenkins]自动化构建：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: '77086142@qq.com'

        }
    }

}

